name: Build (ubuntu)

on:
    pull_request:
    workflow_dispatch:

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code and Submodules
              uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Install Dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y \
                      build-essential cmake cppcheck gdb ninja-build valgrind \
                      clang-18 clang-tools-18 lld-18 llvm-18 \
                      gcc-multilib g++-multilib curl zip unzip
                  sudo ln -sf /usr/bin/clang-18 /usr/local/bin/clang
                  sudo ln -sf /usr/bin/clang++-18 /usr/local/bin/clang++
                  sudo ln -sf /usr/bin/clang-cl-18 /usr/local/bin/clang-cl
                  sudo ln -sf /usr/bin/lld-18 /usr/local/bin/lld
                  sudo ln -sf /usr/bin/llvm-rc-18 /usr/local/bin/llvm-rc
                  sudo ln -sf /usr/bin/llvm-mt-18 /usr/local/bin/llvm-mt

            - name: Setup xwin and Windows Toolchain
              run: |
                  wget https://github.com/Jake-Shadle/xwin/releases/download/0.6.5/xwin-0.6.5-x86_64-unknown-linux-musl.tar.gz -O /tmp/xwin.tar.gz
                  tar -xf /tmp/xwin.tar.gz -C /tmp
                  sudo mv /tmp/xwin-*/xwin /usr/local/bin/
                  xwin --accept-license --arch x86 \
                      --crt-version 14.29.16.11 --sdk-version 10.0.20348 \
                      splat --output /opt/xwin --include-debug-libs

            - name: Build cURL
              run: |
                  wget https://curl.se/download/curl-7.62.0.tar.gz -O /tmp/curl.tar.gz
                  tar -xf /tmp/curl.tar.gz -C /tmp
                  mv /tmp/curl-* /opt/curl
                  cd /opt/curl
                  cmake --fresh -DCMAKE_BUILD_TYPE=Release -G Ninja -B build
                  ninja -C build
                  sudo cp -r build/lib/* /usr/local/lib/
                  sudo cp -r include/* /usr/local/include/

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "16"

            - name: Get Yarn Cache Directory
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

            - name: Load Yarn Cache
              uses: actions/cache@v4
              id: yarn-cache
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-

            - name: Load Cached Node Modules
              uses: actions/cache@v4
              with:
                  path: "**/node_modules"
                  key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

            - name: Install Assets
              run: yarn

            - name: Setup Build Version
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: bash .github/workflows/plugin_version.sh

            - name: Run CMake
              env:
                  CC: clang
                  CFLAGS: -m32
                  CXX: clang++
                  CXXFLAGS: -m32
                  CURL_INCLUDEDIR: /usr/local/include
                  CURL_LIBRARYDIR: /usr/local/lib
              run: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja -Bbuild

            - name: Run Ninja Build
              working-directory: build
              run: ninja

            - name: Run Tests
              working-directory: build
              run: |
                  ctest -C Release --output-on-failure --no-tests=error

            - name: Upload Core Binary As Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: UKControllerPluginCore.so
                  path: "./build/bin/UKControllerPluginCore.so"

            - name: Upload Updater Binary As Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: UKControllerPluginUpdater.so
                  path: "./build/bin/UKControllerPluginUpdater.so"

            - name: Upload Loader Binary As Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: UKControllerPlugin.so
                  path: "./build/bin/UKControllerPlugin.so"
